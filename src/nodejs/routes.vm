module.exports = function(app, mongoose, models){

    
  /**
   *   Get all collections.
   */
  app.get(globalAppRootUrl + '/Schemas', function(req, res){
    res.header('Access-Control-Allow-Origin', '*');
    var t = [];
    var modelNames = mongoose.modelNames();
    for (var i = 0; i < modelNames.length; ++i) {
      var rv = {};
      rv.Collections = modelNames[i];
      t.push(rv);
    }
    res.json(t);
  });


  /**
   *  Get all records in a collection.
   */
  app.get(globalAppRootUrl + '/Schemas/:collection', function(req, res){
    res.header('Access-Control-Allow-Origin', '*');
    mongoose.model(req.params.collection).find({}, '_id', function(err, docs){
      var t = [];
      for (var i = 0; i < docs.length; ++i) {
        var rv = {};
        rv.Records = docs[i]._id;
        t.push(rv);
      }
    res.json(t);

    });

  });


 /**
   *  Get a subset of records in a collection.
   */
  app.get(globalAppRootUrl + '/Schemas/:collection?:query', function(req, res){
    
      
    mongoose.model(req.params.collection).find(req.param('query'), {}, function(err, docs){
    
      res.render('collections.jade', {
            title: docs.length + ' Test Records for ' + req.params.collection,
            collectionName: req.params.collection,
            collections: docs
      });

    });

  });
    
  
  /**
   *  View one document in a collection.
   */
  app.get(globalAppRootUrl + '/Schemas/:collection/:id', function(req, res){
    res.header('Access-Control-Allow-Origin', '*');
    mongoose.model(req.params.collection).findById(req.params.id, function(err, doc){
      res.json(doc);
    });
  });  


   /**
   *  delete a document.  yes I know the verb thing.
   */ 
  app.get(globalAppRootUrl + '/Schemas/delete/:collection/:id', function(req, res){

    mongoose.model(req.params.collection).findById(req.params.id, function(err, doc){
         doc.remove();
         doc.save(function(err){
            console.log('error check');
            if(err) { throw err; }
            console.log('saved');
         });
         res.redirect('/');
     });
  });


/**
 *  Build list of collections with an object graph deeper than 3 (for now)
 */
  var graphs = new Array();
#set($recordId = 0)
#foreach ($entryPoint in $entryPoints)
  graphs[${recordId}] = '${entryPoint}';
#set($recordId = $recordId + 1)
#end

  function isObjectGraph(element, index, array) {
    for (var i = 0; i < graphs.length; i++) {
        if (element == graphs[i]) return true;
    } 
    return false;
  }


  /**
   *  Filtered index listing of collections
   */
  app.get(globalAppRootUrl + '/TopSchemas', function(req, res){

    //get all the examples
    var modelNames = mongoose.modelNames();
    modelNames = modelNames.filter(isObjectGraph);
    var t = [];
    for (var i = 0; i < modelNames.length; ++i) {
      var rv = {};
      rv.Collections = modelNames[i];
      t.push(rv);
    }
    res.json(t);
  });

};