<html>  
    <head lang="en">
        <meta charset="utf-8">
        <title>Model-Driven Node: Reference Implementation</title>  
        <link rel="stylesheet" type="text/css" href="ng-grid.css" />
        <link rel="stylesheet" type="text/css" href="style.css" />
        <script type="text/javascript" src="jquery-1.11.1.js"></script>
        <script type="text/javascript" src="angular-1.2.9/angular.js"></script>
        <script type="text/javascript" src="ng-grid-2.0.11.min.js"></script>
        <script type="text/javascript" src="collections.js"></script> 

    </head>
    <body ng-app="myApp">
<h2>Model-Driven Mode: Reference Implementation</h2>
          <img src="http://nodemy-ghost.herokuapp.com/content/images/2014/May/MDN/ReferenceImplementation.png"/>

<p>This page is part of the preceding diagram. You're running the reference implementation right now. This site was generated with 15 java classes, 10 velocity templates and 1 xsd schema to 
demonstrate what an enterprise-level suite might look like with componentized node.js applications.</p>
<p>App A has 1152 auto-generated models (tables), collections, test data and API derived from an open source xsd schema created by the 
<a href="http://www.opentravel.org/">Open Travel Alliance.</a>
I created this enterprise application in 120 hours but by creating a generation tool instead of by writing basic code, so now I can create a new application in a few minutes. 
A real e-commerce site would probably need less than 100 java classes, less than 100 velocity templates and 1 xsd schema.</p>
<p>The real value of the model-driven node is dynamic regeneration of all associated parts as the xsd schema evolves; 
the parts hold together more consistently and require less testing.</p>
       
            <a ng-href="http://nodemy-ghost.herokuapp.com/model-driven-node-part-1/"/>Design Docs</a><br><br>
        
            <a ng-href="https://github.com/broward/ModelDrivenNode"/>Source Code</a><br><br>

          <p><b>Select a collection, then select a record from that collection:</b></p>

          <div ng-controller="RecordCtrl">   
            <div class="nested" ng-controller="CollectionCtrl"> 
              <div class="gridStyle" ng-grid="gridOptions"></div>      
              <div class="gridStyle" ng-grid="recordOptions"></div>
              <button ng-click="getCollectionName()">Get</button>
            </div>   
          </div>       
          <textarea id="myTextarea" class="textarea">Json Record from MongoDB</textarea>

          <div ng-controller="ApiCtrl"> 
            <div class="resetStyle" ng-grid="apiOptions"></div>
          </div>

    </body>
</html>