module.exports = function(app, mongoose, models){

  /**
   *  Index listing of collections
   */
  app.get('/${schema}', function(req, res){

    //get all the examples
    var modelNames = mongoose.modelNames();
      
    res.render('models.jade', {
      title: modelNames.length + ' Generated Models for ${schema} Schema',
      schema: '${schema}',
      models:modelNames
    });
  });
  
  
  /**
   *  Listing
   */
  app.get('/${schema}/:collection', function(req, res){
    
    mongoose.model(req.params.collection).find({}, function(err, docs){
      
      res.render('collections.jade', {
            title: docs.length + ' Test Records for ' + req.params.collection,
            schema: '${schema}',
            collectionName: req.params.collection,
            collections: docs
      });

    });

  });


  /**
   *  View
   */
  app.get('/${schema}/:collection/:id', function(req, res){
    
    mongoose.model(req.params.collection).findById(req.params.id, function(err, doc){

      console.log("doc=" + doc);
      
      //render the view page
      res.render('doc.jade', {
            title: 'Test Record for ' + req.params.collection,
            schema: '${schema}',
            doc: doc
      });

    });
  });  
  
   /**
   *  delete a doc.  yes I know the verb thing.
   */ 
  app.get('/${schema}/delete/:collection/:id', function(req, res){

    console.log("hello baby!");

    mongoose.model(req.params.collection).findById(req.params.id, function(err, doc){
         doc.remove();
         doc.save(function(err){
            console.log('error check');
            if(err) { throw err; }
            console.log('saved');
         });
         res.redirect('/');
     });
  });



  var graphs = new Array();
#set($recordId = 0)
#foreach ($entryPoint in $entryPoints)
  graphs[${recordId}] = '${entryPoint}';
#set($recordId = $recordId + 1)
#end

  function isObjectGraph(element, index, array) {
    for (var i = 0; i < graphs.length; i++) {
        if (element == graphs[i]) return true;
    } 
    return false;
  }

  /**
   *  Filtered index listing of collections
   */
  app.get('/graph/${schema}', function(req, res){

    //get all the examples
    var modelNames = mongoose.modelNames();
    modelNames = modelNames.filter(isObjectGraph);
       
    res.render('models.jade', {
      title: modelNames.length + ' Generated Models for ${schema} Schema',
      schema: '${schema}',
      models: modelNames
    });
  });

};